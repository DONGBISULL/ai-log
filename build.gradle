plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = 'app.jar'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    /* JPA */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    /* 카프카 */
    implementation 'org.springframework.kafka:spring-kafka:3.3.7'
    /* postgresql */
    implementation 'org.postgresql:postgresql:42.7.7'
    /* 올라마 */
//    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    // Spring AI Core
    // implementation 'org.springframework.ai:spring-ai-core:1.0.0'
    // Ollama
//    implementation 'org.springframework.ai:spring-ai-ollama:1.0.0'
    // OpenAI
    //  implementation 'org.springframework.ai:spring-ai-openai:1.0.0'
    // gemini - vertex  유료라 우회 방식으로 연결
    // implementation 'org.springframework.ai:spring-ai-starter-model-vertex-ai-gemini:1.0.0'
    implementation 'org.springframework.ai:spring-ai-starter-model-openai:1.0.0'
    // Spring ai vector DB
    implementation 'org.springframework.ai:spring-ai-pgvector-store:1.0.0'
    /* mapstruct */
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            include '**/*'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
